
import java.util.ArrayList;
import java.util.Objects;


/******************************************************************************
 * File:NewJFrame.java
 * Course: 17655
 * Project: Assignment 2
 * Copyright: Copyright (c) 2009 Carnegie Mellon University
 * Versions:
 *	1.0 November 2009 - Initial rewrite of original assignment 2 (ajl).
 *
 * This class defines a GUI application that allows inventory to be added to the
 * inventory databases. There are tree tables in the inventory database: trees,
 * shrubs, and seeds.
 *
 ******************************************************************************/
/*
 * AddInventoryMainFrame.java
 *
 * Created on Jan 29, 2010, 9:24:23 PM
 */

/**
 *
 * @author lattanze
 */
public class InventoryMainFrame extends javax.swing.JFrame {

       String versionID = "v2.10.11";
       InventoryAppLogic  inventoryApp = new InventoryAppLogic();
       
       Session mySession = new Session();
       String  current_user_name = "";
        
    /** Creates new form AddInventoryMainFrame */
    public InventoryMainFrame() {
        initComponents();
        jLabel1.setText("Inventory Management Application " + versionID);
    }
    
    private Boolean AuthenticateUser() {
        
        Boolean validSession = false;
        
        if(!mySession.isLoggedOn())
        {
            LoginDialog dialog = new LoginDialog(new javax.swing.JFrame(), true);
            
            while(!dialog.userAbort)
            {    
                dialog.setVisible(true);

                if(!Objects.equals(dialog.user_name, new String(""))) 
                {
                    validSession = mySession.Logon(dialog.user_name, dialog.password);
                    if(validSession)
                    {
                        current_user_name = dialog.user_name;
                        /*enable log off button*/
                        jButton5.setEnabled(true);

                        /*Show current user name*/
                        jTextField1.setText(current_user_name);
                        
                        break;
                    }
                    else
                    {
                        current_user_name = "";
                        /*Disable log off button*/
                        jButton5.setEnabled(false);

                        jTextField1.setText("Unable to log in");
                    }
                }
            }
        }
        else
        {
            validSession = true;
            /*enable log off button*/
            jButton5.setEnabled(true);
        }
        return validSession;
    }
    
    private void LogOff() {
        if(mySession.isLoggedOn())
        {
            mySession.Logoff();
            // ClearAllDisplayedInfo();

            /*Disable log off button*/
            jButton5.setEnabled(false);

            /*Clear current user name*/
            jTextField1.setText("");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("EEPs Inventory Management Application");

        jLabel2.setText("Product ID");

        jLabel3.setText("Price");

        jLabel4.setText("Quantity");

        jButton1.setText("Add Item");
        jButton1.setActionCommand("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel5.setText("Product Description");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jButton2.setText("List Inventory");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete Item");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Decrement");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel7.setText("Deletes item selected from list ");

        jLabel8.setText("Decrements inventory count of item selected from the list");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select product", "Seeds", "Trees", "Shrubs", "Culture Boxes", "Genomics", "Processing", "Ref Materials" }));

        jButton5.setText("Log Off");

        jButton6.setText("Exit");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(909, 909, 909)
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField3)
                            .addComponent(jTextField4)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel7))
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 901, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton6))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1019, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(324, 324, 324)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton4)))
                        .addGap(21, 21, 21)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // Adds inventory to database
        
        Boolean validSession = AuthenticateUser();
        
        if(validSession) {

        Boolean connectError = false;   // Error flag
        String description;             // Tree, seed, or shrub description
        Boolean executeError = false;   // Error flag
        String errString = null;        // String for displaying errors
        int executeUpdateVal;           // Return value from execute indicating effected rows
        Boolean fieldError = false;     // Error flag
        String msgString = null;        // String for displaying non-error messages
        String tableSelected = null;    // String used to determine which data table to use
        Integer quantity;               // Quantity of trees, seeds, or shrubs
        Float perUnitCost;              // Cost per tree, seed, or shrub unit
        String productID = null;        // Product id of tree, seed, or shrub
        java.sql.Statement s = null;    // SQL statement pointer
        String invItem = null;          //selected inventory item
        
        // Check to make sure inventory item is selected
       
        jTextArea1.setText("");
        
        if (jComboBox1.getSelectedItem().toString().equals("Select product"))
        {
            fieldError = true;
            jTextArea1.append("\nMust select a product");

        } else {
       
            //Make sure there is a product description
            if ( jTextField5.getText().length() == 0 )
            {
                fieldError = true;
                jTextArea1.append("\nMust enter a product description.");
                
            } else {
     
                //Make sure there is a product ID
                if ( jTextField2.getText().length() == 0 )
                {
                    fieldError = true;
                    jTextArea1.append("\nMust enter a product ID.");
                } else {
            
                    //Make sure there is a price
                    if ( jTextField3.getText().length() == 0 )
                    {
                        fieldError = true;
                        jTextArea1.append("\nMust enter a product price.");
                    } else {
                    
                        //Make sure quantity is specified
                        if ( jTextField4.getText().length() == 0 )
                        {
                            fieldError = true;
                            jTextArea1.append("\nMust enter a product quantity.");
                        } // quantity
                    } // price
                } // product ID
            } //product description
        } //category selected

        //Now, if there was no error in the data fields, we try to
        //connect to the database.
        
        if ( !fieldError )
        {      
         try
            {
                // get the data from the text fields
                invItem = jComboBox1.getSelectedItem().toString();
                description = jTextField5.getText();
                productID = jTextField2.getText();
                quantity = Integer.parseInt(jTextField4.getText());
                perUnitCost = Float.parseFloat(jTextField3.getText());

                // create an SQL statement variable and create the INSERT
                // query to insert the new inventory into the database

                //insert inventory item
                inventoryApp.addInventoryItem (invItem, productID, 
                        description, quantity, perUnitCost);
                
                // let the user know all went well

                jTextArea1.append("\nINVENTORY UPDATED... The following was added to the " + invItem + " inventory...\n");
                jTextArea1.append("\nProduct Code:: " + productID);
                jTextArea1.append("\nDescription::  " + description);
                jTextArea1.append("\nQuantity::     " + quantity);
                jTextArea1.append("\nUnit Cost::    " + perUnitCost);

            } catch (Exception e) {

                errString =  "\nProblem adding inventory:: " + e;
                jTextArea1.append(errString);
                executeError = true;

            } // try

        } //execute SQL check

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        Boolean validSession = AuthenticateUser();
        
        if(validSession) {

        // This button will list the inventory for the product selected by the
        // radio button
        Boolean connectError = false;   // Error flag
        String description;             // Tree, seed, or shrub description
        Boolean executeError = false;   // Error flag
        String errString = null;        // String for displaying errors
        int executeUpdateVal;           // Return value from execute indicating effected rows
        Boolean fieldError = false;     // Error flag
        String msgString = null;        // String for displaying non-error messages
        String tableSelected = null;    // String used to determine which data table to use
        Integer quantity;               // Quantity of trees, seeds, or shrubs
        Float perUnitCost;              // Cost per tree, seed, or shrub unit
        String productID = null;        // Product id of tree, seed, or shrub
        java.sql.Statement s = null;    // SQL statement pointer
        String invItem = null;
        
        // Check to make sure inventory item is selected
       
        jTextArea1.setText("");
        
        if (jComboBox1.getSelectedItem().toString().equals("Select product"))
        {
            fieldError = true;
            jTextArea1.append("\nMust select a product");

        } 
        if ( !fieldError )
        {      
         try
            {
                // get the data from the text fields
                invItem = jComboBox1.getSelectedItem().toString();

                 //get the inventory item list
                 ArrayList<InventoryItem> inventoryItems = inventoryApp.getInventoryItems (invItem);
                
                 // Now we list the inventory for the selected table
                jTextArea1.setText("");
              //TREE>>EF001::Elephant Foot :: 6::800.00  
             for(int i=0;i<inventoryItems.size();i++)
                {
                    switch (invItem) {
                        case "Trees":
                            {
                                TreeItem myItem = (TreeItem) inventoryItems.get(i);
                                msgString = "TREE>>" + myItem.product_code +
                                        "::"+ myItem.description + "::" + myItem.price
                                        + "::" + myItem.quantity ;
                                break;
                            }
                        case "Shrubs":
                            {
                                ShrubItem myItem = (ShrubItem) inventoryItems.get(i);
                                msgString = "SHRUB>>" + myItem.product_code +
                                        "::"+ myItem.description + "::" + myItem.price
                                        + "::" + myItem.quantity ;
                                break;
                            }
                        case "Seeds":
                            {
                                SeedItem myItem = (SeedItem) inventoryItems.get(i);
                                msgString = "SEED>>" + myItem.product_code +
                                        "::"+ myItem.description + "::" + myItem.price
                                        + "::" + myItem.quantity ;
                                break;
                            }
                        case "Culture Boxes":
                            {
                                CultureboxItem myItem = (CultureboxItem) inventoryItems.get(i);
                                msgString = "CULTURE BOXES>>" + myItem.product_code +
                                        "::"+ myItem.description + "::" + myItem.price
                                        + "::" + myItem.quantity ;
                                break;
                            }
                        case "Genomics":
                            {
                                GenomicItem myItem = (GenomicItem) inventoryItems.get(i);
                                msgString = "GENOMICS>>" + myItem.product_code +
                                        "::"+ myItem.description + "::" + myItem.price
                                        + "::" + myItem.quantity ;
                                break;
                            }
                        case "Processing":
                            {
                                ProcessingItem myItem = (ProcessingItem) inventoryItems.get(i);
                                msgString = "PROCESSING>>" + myItem.product_code +
                                        "::"+ myItem.description + "::" + myItem.price
                                        + "::" + myItem.quantity ;
                                break;
                            }
                        case "Ref Materials":
                            {
                                ReferenceMaterialItem myItem = (ReferenceMaterialItem) inventoryItems.get(i);
                                msgString = "REF MATERIAL>>" + myItem.product_code +
                                        "::"+ myItem.description + "::" + myItem.price
                                        + "::" + myItem.quantity ;
                                break;
                            }
                        default:
                            break;
                    }

                    jTextArea1.append("\n"+msgString);
                }                 

            } catch (Exception e) {

                errString =  "\nProblem listing inventory:: " + e;
                jTextArea1.append(errString);
                executeError = true;

            } // try
        }
        
        }
      
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        Boolean validSession = AuthenticateUser();
        
        if(validSession) {
        
        // Deletes an item from the database
        
        int beginIndex;                     // Parsing index
        int endIndex;                       // Parsing index
        String productID = null;            // Product ID pnemonic
        Boolean IndexNotFound;              // Flag indicating a string index was not found.
        Boolean connectError = false;       // Error flag
        String errString = null;            // String for displaying errors
        int executeUpdateVal;               // Return value from execute indicating effected rows
        String msgString = null;            // String for displaying non-error messages
        String tableSelected = null;        // String used to determine which data table to use
        java.sql.Statement s = null;        // SQL statement pointer
        String SQLstatement = null;         // String for building SQL queries
        String inventorySelection = null;   // Inventory text string selected by user
        IndexNotFound = false;              // Flag indicating that a string index was not found
        String invItem = null;
        // this is the selected line of text
        inventorySelection =  jTextArea1.getSelectedText();
        invItem = jComboBox1.getSelectedItem().toString();
        // make sure the selection is not blank
        if ( inventorySelection != null )
        {
            // get the product ID - here we get the leading index
            beginIndex = 0;
            endIndex = inventorySelection.indexOf(">>",beginIndex);

            if (endIndex < 0 ) {
                IndexNotFound = true;
            } else {
                beginIndex = endIndex+2; //skip past ">>"                                
            }
            
            if ( !IndexNotFound )
            {
                // Here we get the trailing index and parse out the productID
                endIndex = inventorySelection.indexOf(":",beginIndex);

                if (endIndex < 0 ) {
                    IndexNotFound = true;
                } else {
                    productID = inventorySelection.substring(beginIndex,endIndex);
                }              
            }
           
            // Now we delete the inventory item indicated by the productID we
            // parsed out above from the indicated table.
            
            if ( !IndexNotFound )
            {
                jTextArea1.setText("");
                jTextArea1.append( "Deleting ProductID: " + productID );
               

                //delete the inventory item

                if (!connectError )
                {
                    try
                    {
                        

                    //delete inventory item
                    inventoryApp.deleteInventoryItem (invItem, productID);

                        // let the user know all went well
                        
                        jTextArea1.append("\n\n" + productID + " deleted...");
                        jTextArea1.append("\n Number of items deleted: " + 1 );


                    } catch (Exception e) {

                        errString =  "\nProblem with delete:: " + e;
                        jTextArea1.append(errString);

                    } // try
               
                } // connection check    
                                       
            } else {

                jTextArea1.setText("");
                jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)");      

            }
        } else {

            jTextArea1.setText("");
            jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)"); 

        } // Blank string check
          
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        Boolean validSession = AuthenticateUser();
        
        if(validSession) {

        // Decrements the inventory count for a selected item
        int beginIndex;                     // Parsing index
        int endIndex;                       // Parsing index
        String productID = null;            // Product ID pnemonic
        Boolean IndexNotFound;              // Flag indicating a string index was not found.
        Boolean connectError = false;       // Error flag
        String errString = null;            // String for displaying errors
        int executeUpdateVal;               // Return value from execute indicating effected rows
        String msgString = null;            // String for displaying non-error messages
        String tableSelected = null;        // String used to determine which data table to use
        java.sql.Statement s = null;        // SQL statement pointer
        String SQLstatement1 = null;        // String for building SQL queries
        String SQLstatement2 = null;        // String for building SQL queries
        String inventorySelection = null;   // Inventory text string selected by user
        IndexNotFound = false;              // Flag indicating that a string index was not found
        String invItem = null;
        // this is the selected line of text
        inventorySelection =  jTextArea1.getSelectedText();
        invItem = jComboBox1.getSelectedItem().toString();
       
        
        // make sure the selection is not blank
        if ( inventorySelection != null )
        {
            // get the product ID - here we get the leading index
            beginIndex = 0;
            endIndex = inventorySelection.indexOf(">>",beginIndex);

            if (endIndex < 0 ) {
                IndexNotFound = true;
            } else {
                beginIndex = endIndex+2; //skip past ">>"                                
            }
            
            if ( !IndexNotFound )
            {
                // Here we get the trailing index and parse out the productID
                endIndex = inventorySelection.indexOf(":",beginIndex);

                if (endIndex < 0 ) {
                    IndexNotFound = true;
                 } else {
                    productID = inventorySelection.substring(beginIndex,endIndex);
                }              
            }
           
            // Now we decrement the inventory count of the item indicated by the productID we
            // parsed out above from the indicated table.
            
            if ( !IndexNotFound )
            {
                jTextArea1.setText("");
                jTextArea1.append( "Decrementing ProductID: " + productID );

                //decrement the inventory item count 
                
               
                    try
                    {
                        //decrement inventory item
                        inventoryApp.decrementInventoryItem (invItem, productID);

                        // execute the update, then query the BD for the table entry for the item just changed
                        // and display it for the user
 
                        jTextArea1.append("\n\n" + productID + " inventory decremented...");

                    } catch (Exception e) {

                        errString =  "\nProblem with delete:: " + e;
                        jTextArea1.append(errString);

                    } // try  
                                       
            } else {

                jTextArea1.setText("");
                jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)");      

            }
        } else {

            jTextArea1.setText("");
            jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)"); 

        } // Blank string check
        
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
        LogOff();
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        LogOff();
        System.exit(0);
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventoryMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

}
